from aiogram import Router, F
from aiogram.filters import CommandStart, or_f, and_f
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from keyboards.user_keyboards import keyboards_start_user, create_keyboard_list, keyboard_details, keyboard_full_text, \
    keyboard_full_text_1, keyboard_get_more, keyboard_get_more_event
from filter.admin_filter import IsSuperAdmin
from config_data.config import Config, load_config
from database import requests as rq
from database.models import Place

import logging
router = Router()
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()


class User(StatesGroup):
    category = State()


@router.message(or_f(and_f(CommandStart(), ~IsSuperAdmin()),
                     and_f(IsSuperAdmin(), F.text == '/user')))
async def process_start_command_user(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ—Å–ª–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start
     –∏–ª–∏ –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /user
    1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –Ω–µ–π
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await state.update_data(state=None)
    await rq.add_user(tg_id=message.chat.id,
                      data={"tg_id": message.chat.id, "username": message.from_user.username})
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥/–ø–æ–¥—Ä—É–∂–∫–∞!\n\n'
                              f'–≠—Ç–æ –¥—Ä—É–∂–µ—Å–∫–æ–µ –º–µ–¥–∏–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º –í–º–µ—Å—Ç–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥—Ä—É–∂–µ–∫!\n\n'
                              f'–ß—Ç–æ —Ç—ã –Ω–∞–π–¥–µ—à—å –∑–¥–µ—Å—å?\n'
                              f'ü™©–≥–¥–µ –≤–∫—É—Å–Ω–æ –ø–æ–µ—Å—Ç—å –∏–ª–∏ –≤—ã–ø–∏—Ç—å: —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –±–∞—Ä—ã, –∫–æ—Ñ–µ–π–Ω–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å \n'
                              f'üå≤–∫—É–¥–∞ —É–µ—Ö–∞—Ç—å –∑–∞–≥–æ—Ä–æ–¥\n'
                              f'‚òÄÔ∏è–∫–∞–∫–∏–º —Å–ø–æ—Ä—Ç–æ–º –∑–∞–Ω—è—Ç—å—Å—è –∏–ª–∏ –≤ –∫–∞–∫–æ–º —Å–ø–∞ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å\n'
                              f'ü¶™–≤–∏–Ω—Ç–∞–∂–Ω—ã–µ —Å–ø–æ—Ç—ã –∏ —Å—Ç–∏–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã\n'
                              f'üêö–Ω–µ–¥–æ—Ä–æ–≥–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—Ç–µ–ª–∏ –∏ –¥–æ–º–∏–∫–∏\n\n'
                              f'üìç–ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–∫–∞—Ä—Ç–∞—Ö, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\n\n'
                              f'–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–æ—Ç–µ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ù–∏–∫–æ–π @legeau',
                         reply_markup=keyboards_start_user())


@router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ')
async def process_start_command_user(message: Message) -> None:
    """
    –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
    :param message:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    list_category: list = await rq.get_list_category()
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç–∞',
                         reply_markup=create_keyboard_list(list_name_button=list_category,
                                                           str_callback='usercategory'))


async def show_card(callback: CallbackQuery, state: FSMContext, list_card: list) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ—Å—Ç
    :param callback:
    :param state:
    :param list_card:
    :return:
    """
    logging.info(f'process_select_category_card: {callback.message.chat.id}')
    count_show = 3
    data = await state.get_data()
    count_card_show = data['count_card_show'] + count_show
    await state.update_data(count_card_show=count_card_show)
    for info_card in list_card[count_card_show - count_show:count_card_show]:
        media = []
        list_image = info_card["list_image"].split(',')
        for image in list_image:
            media.append(InputMediaPhoto(media=image))
        await callback.message.answer_media_group(media=media)
        await callback.message.answer(text=f'<b>{info_card["title"]}</b>\n'
                                           f'{info_card["short_description"]}',
                                      reply_markup=keyboard_details(info_card["id_place"]),
                                      parse_mode='html')
    if len(list_card) > count_card_show:
        await callback.message.answer(text='–ù–µ —Ö–≤–∞—Ç–∏–ª–æ –º–µ—Å—Ç?',
                                      reply_markup=keyboard_get_more())


@router.callback_query(F.data == 'get_more')
async def process_select_get_more(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—â–µ 3 –∫–∞—Ä—Ç–æ—á–∫–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_get_more: {callback.message.chat.id}')
    data = await state.get_data()
    list_card = data['list_card']
    await show_card(callback=callback, state=state, list_card=list_card)


@router.callback_query(F.data.startswith('usercategory'))
async def process_select_category_card(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_category_card: {callback.message.chat.id}')
    list_subcategory = await rq.get_list_subcategory(callback.data.split(':')[1])
    await state.update_data(category=callback.data.split(':')[1])
    print(list_subcategory)
    # –µ—Å–ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if list_subcategory != ['none']:
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç–∞',
                                         reply_markup=create_keyboard_list(list_name_button=list_subcategory,
                                                                           str_callback='usersubcategory'))
    # –∏–Ω–∞—á–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    else:
        await callback.message.answer(text=f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç')
        await state.update_data(subcategory='none')
        data = await state.get_data()
        list_card = await rq.get_list_card(data['category'],
                                           data['subcategory'])
        await state.update_data(list_card=list_card)
        await state.update_data(count_card_show=0)
        await show_card(callback=callback, state=state, list_card=list_card)
    await callback.answer()


@router.callback_query(F.data.startswith('usersubcategory'))
async def process_select_category_card(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_category_card: {callback.message.chat.id}')
    await state.update_data(subcategory=callback.data.split(':')[1])
    data = await state.get_data()
    list_card = await rq.get_list_card(data['category'],
                                       data['subcategory'])
    await state.update_data(list_card=list_card)
    await state.update_data(count_card_show=0)
    logging.info(f'process_select_category_card: {callback.message.chat.id}')
    await show_card(callback=callback, state=state, list_card=list_card)


@router.callback_query(F.data.startswith('details_user:'))
async def process_details(callback: CallbackQuery) -> None:
    """
    –î–µ–π—Å—Ç–≤–∏—è
    :param callback:
    :return:
    """
    logging.info(f'process_details: {callback.message.chat.id}')
    id_card = callback.data.split(':')[1]
    card = await rq.info_card(int(id_card))
    count = card.count_link + 1
    await rq.set_count_show_card(count=count, id_card=id_card)
    if card.instagram != 'none':
        await callback.message.edit_text(text=f'<b>{card.title}</b>\n'
                                              f'{card.long_description}\n'
                                              f'<i>{card.address}</i>',
                                         reply_markup=keyboard_full_text(card.yandex_map, card.instagram),
                                         parse_mode='html')
    else:
        await callback.message.edit_text(text=f'<b>{card.title}</b>\n'
                                              f'{card.long_description}\n'
                                              f'<i>{card.address}</i>',
                                         reply_markup=keyboard_full_text_1(card.yandex_map),
                                         parse_mode='html')


async def show_card_event(message: Message, state: FSMContext, list_event: list[Place]) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    :param message:
    :param state:
    :param list_event:
    :return:
    """
    logging.info(f'show_card_event: {message.chat.id}')
    count_show = 3
    data = await state.get_data()
    count_event_show = data['count_event_show'] + count_show
    await state.update_data(count_event_show=count_event_show)
    for info_event in list_event[count_event_show - count_show:count_event_show]:
        media = []
        list_image = info_event.list_image.split(',')
        for image in list_image:
            media.append(InputMediaPhoto(media=image))
        await message.answer_media_group(media=media)
        await message.answer(text=f'<b>{info_event.title}</b>\n{info_event.short_description}',
                             reply_markup=keyboard_details(info_event.id_place),
                             parse_mode='html')
    if len(list_event) > count_event_show:
        await message.answer(text='–ù–µ —Ö–≤–∞—Ç–∏–ª–æ –º–µ—Å—Ç?',
                             reply_markup=keyboard_get_more_event())


@router.message(F.text == 'üéß–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–¥–µ–ª–∏')
async def process_events_week(message: Message, state: FSMContext) -> None:
    """
    –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_events_week: {message.chat.id}')
    list_event: list = await rq.get_list_card_event()
    await state.update_data(list_event=list_event)
    await state.update_data(count_event_show=0)
    await show_card_event(message=message, state=state, list_event=list_event)


@router.callback_query(F.data == 'get_more_event')
async def process_select_get_more_event(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_get_more_event: {callback.message.chat.id}')
    data = await state.get_data()
    list_event = data['list_event']
    await show_card_event(message=callback.message, state=state, list_event=list_event)


@router.callback_query(F.data.startswith('event_'))
async def process_event_show(callback: CallbackQuery) -> None:
    logging.info(f'process_event_show: {callback.message.chat.id}')
    info_event = await rq.info_card(id_card=int(callback.data.split('_')[1]))
    media = []
    list_image = info_event.list_image.split(',')
    for image in list_image:
        media.append(InputMediaPhoto(media=image))
    await callback.message.answer_media_group(media=media)
    await callback.message.answer(text=f'<b>{info_event.title}</b>\n'
                                       f'{info_event.short_description}',
                                  reply_markup=keyboard_details(info_event.id_place),
                                  parse_mode='html')


@router.message(F.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def process_question(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    :param message:
    :return:
    """
    logging.info(f'process_question: {message.chat.id}')
    await message.answer(text='–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,'
                              ' —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @legeau')
